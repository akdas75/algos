
#include <stdio.h>
#include <stdlib.h>


#define True 1
#define False 0

typedef struct stack_t {

    int size;
    int top;
    int *data;
} stack;


stack* 
stack_initialize (int size) {

    printf ("Intializing stack ....\n");
    stack * sp;
    sp = malloc (sizeof (struct stack_t));
    if (sp != NULL) {
        sp->size = size;
        sp->top = -1;
        sp->data = (int *) malloc (sizeof (int) * sp->size);
    }

    return sp;
}

void
stack_push (stack* sp, int elem) {

    printf ("Pushing %d \n",elem);
    

    if (sp->top < (sp->size - 1)) {
        sp->top++;
        sp->data[sp->top] = elem;
    } else {
        printf ("Stack is full \n");
    }    

}

int
stack_pop (stack* sp) {
    
    int elem;   

    if (sp->top != - 1) {
       //printf ("Popping %d \n", sp->top); 
       elem = sp->data[sp->top];
       sp->top--;
    } else {
        printf ("Stack is empty \n");
        elem = -1;
    } 

    return elem;
    
}



int
stack_peek (stack* sp, int index) {

      int calculated = sp->top - index + 1;

      if (calculated < 0) {

          printf ("No such index 1 \n");
          return -1;

      } else if (calculated > sp->size) {

          printf ("No such index 2 \n");
          return -1;
      }

      return sp->data[calculated];
}   


unsigned char
is_stack_empty (stack* sp) {

    
     if (sp->top < 0) {
         return True;
     }

     return False;
}  

unsigned char
is_stack_full (stack* sp) {


    printf ("stack top %d \n",sp->top);

    if (sp->top == ((sp->size - 1))) {
         return True;
     }

     return False;

     
}  


int main (void) {

    stack * sp;
    sp = stack_initialize (10);

    stack_push (sp, 1);
    stack_push (sp, 2);
    stack_push (sp, 3);
    stack_push (sp, 4);
    stack_push (sp, 5);
    stack_push (sp, 6);
    stack_push (sp, 7);
    stack_push (sp, 8);
    stack_push (sp, 9);
    stack_push (sp, 10);
    stack_push (sp, 11);
    stack_push (sp, 12);

    printf ("is stack full %d \n",is_stack_full (sp));

    printf ("Peeking %d \n",stack_peek (sp, 1)); 
    printf ("Peeking %d \n",stack_peek (sp, 2)); 

    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));
    printf ("%d \n",stack_pop (sp));


    printf ("is stack empty %d \n",is_stack_empty (sp));
    



}